import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import FSInputFile
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiohttp import ClientSession
from pathlib import Path

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "7535965441:AAHLs_QtIgv8TYB7z7LGQTFiCSMx1kBaD8o"
TON_WALLET = "UQAV3W64G7Db8C2jzPtNFAFleUiwS4JGy4-PC36qlpZ_ziSh"
TON_API_KEY = "AFQZX3V5SD7FNIIAAAABYTAHKIUWZYRRNILLRGA5HPUYMX2QWGBLOKYQS72KKE6XPINAIHY"

PRICES = {
    "start": 1,
    "tasty": 3,
    "juicy": 5,
}

CONTENT_DIR = Path("data/romantic")
os.makedirs(CONTENT_DIR, exist_ok=True)

# === –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ===
logging.basicConfig(level=logging.INFO)
bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# === –ö–û–ú–ê–ù–î–ê /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
        [types.KeyboardButton(text="ü•â –°—Ç–∞—Ä—Ç–æ–≤—ã–π ‚Äî 1 TON")],
        [types.KeyboardButton(text="ü•à –í–∫—É—Å–Ω—ã–π ‚Äî 3 TON")],
        [types.KeyboardButton(text="ü•á –°–æ—á–Ω—ã–π ‚Äî 5 TON")],
    ]
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üòò –Ø ‚Äî –ö—Å—é—à–∞18+.
–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø–∞–∫–µ—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å üî• –∫–æ–Ω—Ç–µ–Ω—Ç.
–û–ø–ª–∞—Ç–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ TON (—Å–µ—Ç—å TON):",
        reply_markup=types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True),
    )

# === –•–≠–ù–î–õ–ï–†–´ –î–õ–Ø –ü–ê–ö–ï–¢–û–í ===
@dp.message(F.text.contains("–°—Ç–∞—Ä—Ç–æ–≤—ã–π"))
async def start_pack(msg: types.Message):
    await send_preview_and_pay(msg, "start")

@dp.message(F.text.contains("–í–∫—É—Å–Ω—ã–π"))
async def tasty_pack(msg: types.Message):
    await send_preview_and_pay(msg, "tasty")

@dp.message(F.text.contains("–°–æ—á–Ω—ã–π"))
async def juicy_pack(msg: types.Message):
    await send_preview_and_pay(msg, "juicy")

# === –ü–û–ö–ê–ó –ü–†–ï–í–¨–Æ + –ò–ù–°–¢–†–£–ö–¶–ò–ò ===
async def send_preview_and_pay(msg: types.Message, pack):
    preview_files = sorted(CONTENT_DIR.glob("*.jpg"))
    if not preview_files:
        await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫–µ ü•∫")
        return

    preview = FSInputFile(preview_files[0])
    await msg.answer_photo(preview, caption=f"–≠—Ç–æ –ø—Ä–µ–≤—å—é üî• –ø–∞–∫–µ—Ç–∞ '{pack}'")

    await msg.answer(
        f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{PRICES[pack]} TON</b>
"
        f"–û—Ç–ø—Ä–∞–≤—å <b>—Ä–æ–≤–Ω–æ {PRICES[pack]} TON</b> –Ω–∞ –º–æ–π TON-–∫–æ—à–µ–ª–µ–∫:
"
        f"<code>{TON_WALLET}</code>

"
        f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ'",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text=f"–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ {pack}")]],
            resize_keyboard=True,
        ),
    )

# === –ü–†–û–í–ï–†–ö–ê –û–ü–õ–ê–¢–´ ===
@dp.message(F.text.startswith("–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ"))
async def check_payment(msg: types.Message):
    pack = msg.text.split("‚úÖ")[-1].strip()
    ton_amount = PRICES.get(pack)
    user_id = msg.from_user.id

    await msg.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ TON, –ø–æ–¥–æ–∂–¥–∏...")

    async with ClientSession() as session:
        url = f"https://tonapi.io/v2/blockchain/accounts/{TON_WALLET}/transactions"
        headers = {"Authorization": f"Bearer {TON_API_KEY}"}
        async with session.get(url, headers=headers) as resp:
            data = await resp.json()

    for tx in data.get("transactions", []):
        if tx["in_msg"].get("source") and float(tx["in_msg"].get("value", 0)) / 10**9 >= ton_amount:
            await msg.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–ª—É—á–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª üîí")
            await msg.answer("–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞: https://t.me/—Ç–≤–æ–π_–ø—Ä–∏–≤–∞—Ç_–∫–∞–Ω–∞–ª")  # <-- –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–Æ –°–°–´–õ–ö–£
            return

    await msg.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É –∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# === –ó–ê–ü–£–°–ö ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
